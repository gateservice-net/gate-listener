// Copyright (c) 2019 Timo Savola. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

enum BindError:int16 {
  None,
  TooManyBindings,
  AlreadyBound,
  InvalidAcceptSize,
  InvalidName,
  NameTooLong,
  UnsupportedPort,
}

enum AcceptError:int16 {
  None,
}

// IPAddr contains an IPv4 or an IPv6 address.  The values are in big-endian
// (network) byte order.
struct IPAddr {
  a:uint32; // IPv4 address, or most significant bits of IPv6 address.
  b:uint32;
  c:uint32;
  d:uint32;
}

struct AcceptBasic {
  error:AcceptError;
  conn_id:int32;
  addr:IPAddr;
  port:uint16;
}

table Accept {
  basic:AcceptBasic;
}

enum AcceptSize:int16 {
  Invalid = 0,
  Basic = 44, // Encoded size of Accept including AcceptBasic.
}

table BindTLS {
  accept_size:AcceptSize;
  name:string;
  port:uint16;
}

table Binding {
  error:BindError;
  listen_id:int32;
  host:string;
  port:uint16;
}

union Function {
  BindTLS,
}

table Call {
  function:Function;
}
